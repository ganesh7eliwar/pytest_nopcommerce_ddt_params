{"uid":"b854a4060094cfe1","name":"Test_User_Login_Params","fullName":"test_cases.test_user_login_params.Test_user_login#test_login_with_params","historyId":"0a47b2b6cfb58054f60385e9fc5d8ceb","time":{"start":1707393291432,"stop":1707393310243,"duration":18811},"description":"testing_login_functionality","descriptionHtml":"<p>testing_login_functionality</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"/logout\">...</a> is not clickable at point (905, 28). Other element would receive the click: <div id=\"ajaxBusy\" style=\"display: block;\">...</div>\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00007FF73ACF5E42+3538674]\n\t(No symbol) [0x00007FF73A914C02]\n\t(No symbol) [0x00007FF73A7C5AEB]\n\t(No symbol) [0x00007FF73A8133E4]\n\t(No symbol) [0x00007FF73A811122]\n\t(No symbol) [0x00007FF73A80E884]\n\t(No symbol) [0x00007FF73A80D5A9]\n\t(No symbol) [0x00007FF73A801950]\n\t(No symbol) [0x00007FF73A82F0AA]\n\t(No symbol) [0x00007FF73A80124A]\n\t(No symbol) [0x00007FF73A82F2C0]\n\t(No symbol) [0x00007FF73A84BDE3]\n\t(No symbol) [0x00007FF73A82EE53]\n\t(No symbol) [0x00007FF73A7FF514]\n\t(No symbol) [0x00007FF73A800631]\n\tGetHandleVerifier [0x00007FF73AD26CAD+3738973]\n\tGetHandleVerifier [0x00007FF73AD7C506+4089270]\n\tGetHandleVerifier [0x00007FF73AD74823+4057299]\n\tGetHandleVerifier [0x00007FF73AA45C49+720121]\n\t(No symbol) [0x00007FF73A92126F]\n\t(No symbol) [0x00007FF73A91C304]\n\t(No symbol) [0x00007FF73A91C432]\n\t(No symbol) [0x00007FF73A90BD04]\n\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\n\tRtlUserThreadStart [0x00007FFCB50026B1+33]","statusTrace":"self = <test_cases.test_user_login_params.Test_user_login object at 0x000001D86330AA10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"29b4d7aa1b7dca4b7696d9e6f4aee480\")>\ndata_for_login = ('admin@yourstore.com', 'admin', 'pass')\n\n    @allure.title('Test_User_Login_Params')\n    @allure.feature('Login Through Params')\n    @allure.story('validating login with multiple parameters')\n    @allure.description('testing_login_functionality')\n    @allure.issue('ABC-005')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_with_params(self, setup, data_for_login):\n        self.logs.info(\"Testcase 'test_login_with_params' Started\")\n        self.logs.info(\"Opening the Browser\")\n        self.driver = setup\n        self.logs.info(\"Assigning Variable to Login Page\")\n        self.lp = Login_page(self.driver)\n        self.logs.info(\"Entering Email from Params -->\" + data_for_login[0])\n        self.lp.email(data_for_login[0])\n        self.logs.info(\"Entering Password from Params -->\" + data_for_login[1])\n        self.lp.password(data_for_login[1])\n        self.logs.info(\"Clicking on Login Button\")\n        self.lp.login_btn()\n        testcase_status_list = []\n        if self.lp.login_verification() == \"Login Passed\":\n            self.logs.info(\"Login Successful\")\n            self.logs.info(\"Entered into 'outer if block'\")\n            if data_for_login[2] == \"pass\":\n                self.logs.info(\"Entered into 'inner if block' of 'outer if block' -->\" + data_for_login[2])\n                self.logs.info(\"Appending the list\")\n                testcase_status_list.append(\"pass\")\n                self.logs.info(\"Capturing Screenshot for Allure Report\")\n                allure.attach(self.driver.get_screenshot_as_png(), name='test_login_with_params_passed',\n                              attachment_type=AttachmentType.PNG)\n                self.logs.info(\"Clicking on logout Button\")\n>               self.lp.logout_btn()\n\ntest_cases\\test_user_login_params.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\login_page.py:34: in logout_btn\n    self.driver.find_element(By.XPATH, self.logout_button_by_xpath).click()\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D85B7130D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF73A90BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB50026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"/logout\">...</a> is not clickable at point (905, 28). Other element would receive the click: <div id=\"ajaxBusy\" style=\"display: block;\">...</div>\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF73ACF5E42+3538674]\nE       \t(No symbol) [0x00007FF73A914C02]\nE       \t(No symbol) [0x00007FF73A7C5AEB]\nE       \t(No symbol) [0x00007FF73A8133E4]\nE       \t(No symbol) [0x00007FF73A811122]\nE       \t(No symbol) [0x00007FF73A80E884]\nE       \t(No symbol) [0x00007FF73A80D5A9]\nE       \t(No symbol) [0x00007FF73A801950]\nE       \t(No symbol) [0x00007FF73A82F0AA]\nE       \t(No symbol) [0x00007FF73A80124A]\nE       \t(No symbol) [0x00007FF73A82F2C0]\nE       \t(No symbol) [0x00007FF73A84BDE3]\nE       \t(No symbol) [0x00007FF73A82EE53]\nE       \t(No symbol) [0x00007FF73A7FF514]\nE       \t(No symbol) [0x00007FF73A800631]\nE       \tGetHandleVerifier [0x00007FF73AD26CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF73AD7C506+4089270]\nE       \tGetHandleVerifier [0x00007FF73AD74823+4057299]\nE       \tGetHandleVerifier [0x00007FF73AA45C49+720121]\nE       \t(No symbol) [0x00007FF73A92126F]\nE       \t(No symbol) [0x00007FF73A91C304]\nE       \t(No symbol) [0x00007FF73A91C432]\nE       \t(No symbol) [0x00007FF73A90BD04]\nE       \tBaseThreadInitThunk [0x00007FFCB40C7344+20]\nE       \tRtlUserThreadStart [0x00007FFCB50026B1+33]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1707393267324,"stop":1707393291401,"duration":24077},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"data_for_login","time":{"start":1707393291406,"stop":1707393291407,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"testing_login_functionality","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"/logout\">...</a> is not clickable at point (905, 28). Other element would receive the click: <div id=\"ajaxBusy\" style=\"display: block;\">...</div>\n  (Session info: chrome=121.0.6167.140)\nStacktrace:\n\tGetHandleVerifier [0x00007FF73ACF5E42+3538674]\n\t(No symbol) [0x00007FF73A914C02]\n\t(No symbol) [0x00007FF73A7C5AEB]\n\t(No symbol) [0x00007FF73A8133E4]\n\t(No symbol) [0x00007FF73A811122]\n\t(No symbol) [0x00007FF73A80E884]\n\t(No symbol) [0x00007FF73A80D5A9]\n\t(No symbol) [0x00007FF73A801950]\n\t(No symbol) [0x00007FF73A82F0AA]\n\t(No symbol) [0x00007FF73A80124A]\n\t(No symbol) [0x00007FF73A82F2C0]\n\t(No symbol) [0x00007FF73A84BDE3]\n\t(No symbol) [0x00007FF73A82EE53]\n\t(No symbol) [0x00007FF73A7FF514]\n\t(No symbol) [0x00007FF73A800631]\n\tGetHandleVerifier [0x00007FF73AD26CAD+3738973]\n\tGetHandleVerifier [0x00007FF73AD7C506+4089270]\n\tGetHandleVerifier [0x00007FF73AD74823+4057299]\n\tGetHandleVerifier [0x00007FF73AA45C49+720121]\n\t(No symbol) [0x00007FF73A92126F]\n\t(No symbol) [0x00007FF73A91C304]\n\t(No symbol) [0x00007FF73A91C432]\n\t(No symbol) [0x00007FF73A90BD04]\n\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\n\tRtlUserThreadStart [0x00007FFCB50026B1+33]","statusTrace":"self = <test_cases.test_user_login_params.Test_user_login object at 0x000001D86330AA10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"29b4d7aa1b7dca4b7696d9e6f4aee480\")>\ndata_for_login = ('admin@yourstore.com', 'admin', 'pass')\n\n    @allure.title('Test_User_Login_Params')\n    @allure.feature('Login Through Params')\n    @allure.story('validating login with multiple parameters')\n    @allure.description('testing_login_functionality')\n    @allure.issue('ABC-005')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_with_params(self, setup, data_for_login):\n        self.logs.info(\"Testcase 'test_login_with_params' Started\")\n        self.logs.info(\"Opening the Browser\")\n        self.driver = setup\n        self.logs.info(\"Assigning Variable to Login Page\")\n        self.lp = Login_page(self.driver)\n        self.logs.info(\"Entering Email from Params -->\" + data_for_login[0])\n        self.lp.email(data_for_login[0])\n        self.logs.info(\"Entering Password from Params -->\" + data_for_login[1])\n        self.lp.password(data_for_login[1])\n        self.logs.info(\"Clicking on Login Button\")\n        self.lp.login_btn()\n        testcase_status_list = []\n        if self.lp.login_verification() == \"Login Passed\":\n            self.logs.info(\"Login Successful\")\n            self.logs.info(\"Entered into 'outer if block'\")\n            if data_for_login[2] == \"pass\":\n                self.logs.info(\"Entered into 'inner if block' of 'outer if block' -->\" + data_for_login[2])\n                self.logs.info(\"Appending the list\")\n                testcase_status_list.append(\"pass\")\n                self.logs.info(\"Capturing Screenshot for Allure Report\")\n                allure.attach(self.driver.get_screenshot_as_png(), name='test_login_with_params_passed',\n                              attachment_type=AttachmentType.PNG)\n                self.logs.info(\"Clicking on logout Button\")\n>               self.lp.logout_btn()\n\ntest_cases\\test_user_login_params.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\login_page.py:34: in logout_btn\n    self.driver.find_element(By.XPATH, self.logout_button_by_xpath).click()\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D85B7130D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF73A90BD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCB40C7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCB50026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"/logout\">...</a> is not clickable at point (905, 28). Other element would receive the click: <div id=\"ajaxBusy\" style=\"display: block;\">...</div>\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF73ACF5E42+3538674]\nE       \t(No symbol) [0x00007FF73A914C02]\nE       \t(No symbol) [0x00007FF73A7C5AEB]\nE       \t(No symbol) [0x00007FF73A8133E4]\nE       \t(No symbol) [0x00007FF73A811122]\nE       \t(No symbol) [0x00007FF73A80E884]\nE       \t(No symbol) [0x00007FF73A80D5A9]\nE       \t(No symbol) [0x00007FF73A801950]\nE       \t(No symbol) [0x00007FF73A82F0AA]\nE       \t(No symbol) [0x00007FF73A80124A]\nE       \t(No symbol) [0x00007FF73A82F2C0]\nE       \t(No symbol) [0x00007FF73A84BDE3]\nE       \t(No symbol) [0x00007FF73A82EE53]\nE       \t(No symbol) [0x00007FF73A7FF514]\nE       \t(No symbol) [0x00007FF73A800631]\nE       \tGetHandleVerifier [0x00007FF73AD26CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF73AD7C506+4089270]\nE       \tGetHandleVerifier [0x00007FF73AD74823+4057299]\nE       \tGetHandleVerifier [0x00007FF73AA45C49+720121]\nE       \t(No symbol) [0x00007FF73A92126F]\nE       \t(No symbol) [0x00007FF73A91C304]\nE       \t(No symbol) [0x00007FF73A91C432]\nE       \t(No symbol) [0x00007FF73A90BD04]\nE       \tBaseThreadInitThunk [0x00007FFCB40C7344+20]\nE       \tRtlUserThreadStart [0x00007FFCB50026B1+33]\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"92d99e0b58089afe","name":"test_login_with_params_passed","source":"92d99e0b58089afe.png","type":"image/png","size":106114},{"uid":"607ff4c5c6706176","name":"log","source":"607ff4c5c6706176.txt","type":"text/plain","size":1045},{"uid":"e7011acd6438747","name":"stdout","source":"e7011acd6438747.txt","type":"text/plain","size":28}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1707393310425,"stop":1707393312666,"duration":2241},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"Login Through Params"},{"name":"severity","value":"critical"},{"name":"story","value":"validating login with multiple parameters"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_user_login_params"},{"name":"subSuite","value":"Test_user_login"},{"name":"host","value":"LAPTOP-1DT8TVKR"},{"name":"thread","value":"15408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_user_login_params"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data_for_login","value":"('admin@yourstore.com', 'admin', 'pass')"}],"links":[{"name":"--> nop_commerce","url":"--> https://admin-demo.nopcommerce.com","type":"link"},{"name":"ABC-005","url":"ABC-005","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b854a4060094cfe1.json","parameterValues":["('admin@yourstore.com', 'admin', 'pass')"]}