{"uid":"d93aa35b322f7ee1","name":"test_user_login_ddt","fullName":"test_cases.test_user_login_ddt.Test_login_ddt#test_user_login_ddt","historyId":"237b95c0a95d54f811041734108a5977","time":{"start":1707307796396,"stop":1707307811619,"duration":15223},"description":"Testcase Login","descriptionHtml":"<p>Testcase Login</p>\n","status":"broken","statusMessage":"zipfile.BadZipFile: File is not a zip file","statusTrace":"self = <test_cases.test_user_login_ddt.Test_login_ddt object at 0x0000021BEADADF10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1a7bf7d69b37d93aa38856b82d6efc78\")>\n\n    @allure.feature('Login')\n    @allure.story('validating login with multiple parameters')\n    @allure.issue('ABC-006')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_user_login_ddt')\n    @allure.description('Testcase Login')\n    def test_user_login_ddt(self, setup):\n        self.logs.info(\"Testcase 'test_user_login_ddt' has Started\")\n        self.driver = setup\n        self.logs.info('Opening the Browser')\n        self.lp = Login_page(self.driver)\n        self.rows = excel_methods.no_of_rows(self.excel_file_path, \"login_data\")\n        print(\"\\nnumber of rows in excel sheet are -->\" + str(self.rows))\n        testcase_status_list = []\n        for r in range(2, self.rows + 1):\n            self.email = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 2)\n            self.password = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 3)\n            self.expected_result = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 4)\n            # print(\"row_number       --> \" + str(r))\n            # print(\"email            --> \" + self.email)\n            # print(\"password         --> \" + self.password)\n            # print(\"expected_result  --> \" + self.expected_result)\n            self.logs.info(\"Entering Email -->\" + self.email)\n            self.lp.email(self.email)\n            self.logs.info(\"Entering Password -->\" + self.password)\n            self.lp.password(self.password)\n            self.logs.info(\"Clicking on Login Button\")\n            self.lp.login_btn()\n            if self.lp.login_verification() == \"Login Passed\":\n>               excel_methods.write_data(self.excel_file_path, \"login_data\", r, 5, \"pass\")\n\ntest_cases\\test_user_login_ddt.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\excel_methods.py:17: in write_data\n    excel_file = openpyxl.load_workbook(file_name)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:344: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1302: in __init__\n    self._RealGetContents()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\n\n    def _RealGetContents(self):\n        \"\"\"Read in the table of contents for the ZIP file.\"\"\"\n        fp = self.fp\n        try:\n            endrec = _EndRecData(fp)\n        except OSError:\n            raise BadZipFile(\"File is not a zip file\")\n        if not endrec:\n>           raise BadZipFile(\"File is not a zip file\")\nE           zipfile.BadZipFile: File is not a zip file\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1369: BadZipFile","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1707307765485,"stop":1707307796354,"duration":30869},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"Testcase Login","status":"broken","statusMessage":"zipfile.BadZipFile: File is not a zip file","statusTrace":"self = <test_cases.test_user_login_ddt.Test_login_ddt object at 0x0000021BEADADF10>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1a7bf7d69b37d93aa38856b82d6efc78\")>\n\n    @allure.feature('Login')\n    @allure.story('validating login with multiple parameters')\n    @allure.issue('ABC-006')\n    @allure.link(url=\"--> https://admin-demo.nopcommerce.com\", name=\"--> nop_commerce\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.title('test_user_login_ddt')\n    @allure.description('Testcase Login')\n    def test_user_login_ddt(self, setup):\n        self.logs.info(\"Testcase 'test_user_login_ddt' has Started\")\n        self.driver = setup\n        self.logs.info('Opening the Browser')\n        self.lp = Login_page(self.driver)\n        self.rows = excel_methods.no_of_rows(self.excel_file_path, \"login_data\")\n        print(\"\\nnumber of rows in excel sheet are -->\" + str(self.rows))\n        testcase_status_list = []\n        for r in range(2, self.rows + 1):\n            self.email = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 2)\n            self.password = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 3)\n            self.expected_result = excel_methods.read_data(self.excel_file_path, \"login_data\", r, 4)\n            # print(\"row_number       --> \" + str(r))\n            # print(\"email            --> \" + self.email)\n            # print(\"password         --> \" + self.password)\n            # print(\"expected_result  --> \" + self.expected_result)\n            self.logs.info(\"Entering Email -->\" + self.email)\n            self.lp.email(self.email)\n            self.logs.info(\"Entering Password -->\" + self.password)\n            self.lp.password(self.password)\n            self.logs.info(\"Clicking on Login Button\")\n            self.lp.login_btn()\n            if self.lp.login_verification() == \"Login Passed\":\n>               excel_methods.write_data(self.excel_file_path, \"login_data\", r, 5, \"pass\")\n\ntest_cases\\test_user_login_ddt.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\excel_methods.py:17: in write_data\n    excel_file = openpyxl.load_workbook(file_name)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:344: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1302: in __init__\n    self._RealGetContents()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\n\n    def _RealGetContents(self):\n        \"\"\"Read in the table of contents for the ZIP file.\"\"\"\n        fp = self.fp\n        try:\n            endrec = _EndRecData(fp)\n        except OSError:\n            raise BadZipFile(\"File is not a zip file\")\n        if not endrec:\n>           raise BadZipFile(\"File is not a zip file\")\nE           zipfile.BadZipFile: File is not a zip file\n\nC:\\Users\\nomul\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1369: BadZipFile","steps":[],"attachments":[{"uid":"d9edd0fbbdb87826","name":"log","source":"d9edd0fbbdb87826.txt","type":"text/plain","size":402},{"uid":"95317804f0bbe235","name":"stdout","source":"95317804f0bbe235.txt","type":"text/plain","size":68}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true},"afterStages":[{"name":"setup::0","time":{"start":1707307812685,"stop":1707307827014,"duration":14329},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"severity","value":"critical"},{"name":"story","value":"validating login with multiple parameters"},{"name":"feature","value":"Login"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_user_login_ddt"},{"name":"subSuite","value":"Test_login_ddt"},{"name":"host","value":"LAPTOP-1DT8TVKR"},{"name":"thread","value":"8664-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_user_login_ddt"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"--> nop_commerce","url":"--> https://admin-demo.nopcommerce.com","type":"link"},{"name":"ABC-006","url":"ABC-006","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d93aa35b322f7ee1.json","parameterValues":[]}